# This manifest is a simplified and corrected version of the deployment.
# It uses direct port numbers to ensure there are no ambiguities.

---
# 1. Deployment: The application pods are defined as before.
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: app1
  name: app1
spec:
  selector:
    matchLabels:
      run: app1
  replicas: 2
  template:
    metadata:
      labels:
        run: app1
    spec:
      containers:
      - image: grpc/java-example-hostname:1.50.2
        name: app1
        ports:
        # Port for the gRPC service.
        - containerPort: 50051
        # Additional port for the HTTP health check endpoint.
        - containerPort: 8080
---
# 2. Service: This exposes the gRPC pods to the load balancer.
# We simplify by using a single port and a targetPort.
apiVersion: v1
kind: Service
metadata:
  name: helloworld
  annotations:
    # This annotation links the service to the BackendConfig.
    cloud.google.com/backend-config: '{"ports": {"80":"grpc-backend-config"}}'
    # Specify HTTP2 as the application protocol.
    cloud.google.com/app-protocols: '{"80":"HTTP2"}'
spec:
  ports:
  - port: 80
    name: helloworld
    protocol: TCP
    targetPort: 50051
  selector:
    run: app1
  type: NodePort
---
# 3. BackendConfig: This is the custom health check configuration.
# We now specify port 80 as the port and use an HTTP health check.
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: grpc-backend-config
spec:
  healthCheck:
    checkIntervalSec: 5
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 10
    type: HTTP
    port: 80
    requestPath: /
---
# 4. Ingress: This is what creates the load balancer.
# It now points directly to the service's port 80, which is the standard
# port for HTTP traffic and will correctly be handled by the load balancer.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: helloworld-ingress
spec:
  ingressClassName: gce
  rules:
  - http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: helloworld
            port:
              number: 80
