# This manifest defines all the necessary Kubernetes resources to
# deploy a gRPC service and expose it via a GKE external Application Load Balancer.

---
# 1. Deployment: The core of your application. It manages the pods.
# The container must be configured to serve gRPC on port 50051 and a
# simple HTTP response on port 8080 for the health check.
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: app1
  name: app1
spec:
  selector:
    matchLabels:
      run: app1
  replicas: 2
  template:
    metadata:
      labels:
        run: app1
    spec:
      containers:
      - image: grpc/java-example-hostname:1.50.2
        name: app1
        ports:
        # Port for the gRPC service.
        - protocol: TCP
          containerPort: 50051
        # Additional port for the HTTP health check endpoint.
        - protocol: TCP
          containerPort: 8080
---
# 2. Service: This resource makes your pods discoverable and routes traffic.
# The `cloud.google.com/backend-config` annotation links this service to
# a custom BackendConfig for health check configuration.
apiVersion: v1
kind: Service
metadata:
  name: helloworld
  annotations:
    # Links the service to the BackendConfig for health check configuration.
    cloud.google.com/backend-config: '{"ports": {"8080":"grpc-backend-config"}}'
    # Specify the application protocol as HTTP2 for gRPC traffic.
    cloud.google.com/app-protocols: '{"helloworld-grpc":"HTTP2"}'
spec:
  ports:
  - port: 8080
    name: helloworld-grpc
    protocol: TCP
    targetPort: 50051
  - port: 8081
    name: helloworld-healthcheck
    protocol: TCP
    targetPort: 8080
  selector:
    run: app1
  # A Service of type NodePort is required for the GKE Ingress controller.
  type: NodePort
---
# 3. BackendConfig: This is a custom Google Cloud resource.
# It explicitly tells the load balancer to perform an HTTP health check on
# a separate port, avoiding the `GRPC` protocol validation error.
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: grpc-backend-config
spec:
  healthCheck:
    checkIntervalSec: 5
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 10
    # The health check type is now HTTP, which is supported by the load balancer.
    type: HTTP
    port: 8081
    requestPath: /
---
# 4. Ingress: This is the resource that creates the load balancer itself.
# It uses the modern `ingressClassName` field and routes all traffic to
# the `helloworld-grpc` service port.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: helloworld-ingress
spec:
  # This tells Kubernetes to use the GCE ingress controller.
  ingressClassName: gce
  rules:
  - http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: helloworld
            port:
              name: helloworld-grpc
