# File: grpc-td-helloworld.yaml
#
# This corrected file uses the proper API versions for the GKE Gateway API
# resources to create a regional external gRPC load balancer.
#
# The overall flow is:
# 1. Deployment: The pod that runs the gRPC server.
# 2. Service: A Kubernetes Service that exposes the Deployment and creates a
#    Network Endpoint Group (NEG) with the 'cloud.google.com/neg' annotation.
# 3. GcpGateway: The GKE Gateway resource that provisions the public IP address
#    and creates the regional external load balancer.
# 4. GRPCRoute: The routing object that connects the Gateway to the backend service.
# 5. BackendService: A Google Cloud BackendService that uses the NEG as its
#    backend and the HealthCheck to monitor its health.
# 6. HealthCheck: A gRPC-specific health check for the load balancer.

---
# 1. Deployment for the gRPC server
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: app1
  name: app1
spec:
  selector:
    matchLabels:
      run: app1
  replicas: 2
  template:
    metadata:
      labels:
        run: app1
    spec:
      containers:
      - image: grpc/java-example-hostname:1.50.2
        name: app1
        ports:
        - protocol: TCP
          containerPort: 50051

---
# 2. Service that creates the Network Endpoint Group (NEG)
apiVersion: v1
kind: Service
metadata:
  name: helloworld-service
  annotations:
    # This annotation creates a standalone NEG.
    cloud.google.com/neg: '{"exposed_ports":{"8080":{"name": "example-grpc-server"}}}'
spec:
  ports:
  - port: 8080
    name: helloworld
    protocol: TCP
    targetPort: 50051
  selector:
    run: app1
  type: ClusterIP

---
# 3. GcpGateway for the regional external load balancer
# This is a GKE Gateway API resource that provisions the load balancer.
apiVersion: networking.gke.io/v1beta1
kind: GcpGateway
metadata:
  name: helloworld-gateway
spec:
  gatewayType: REGIONAL_EXTERNAL_MANAGED
  ports:
  - port: 443

---
# 4. GRPCRoute to define the routing from the Gateway to the BackendService
apiVersion: networking.k8s.io/v1beta1
kind: GRPCRoute
metadata:
  name: helloworld-grpc-route
spec:
  parentRefs:
  - name: helloworld-gateway
  hostnames:
  - "your-domain.com" # Replace with your actual domain
  rules:
  - backendRefs:
    - name: helloworld-grpc-backend-service
      port: 8080

---
# 5. Backend Service for the gRPC load balancer
apiVersion: networking.gke.io/v1beta1
kind: BackendService
metadata:
  name: helloworld-grpc-backend-service
spec:
  backends:
  - neg: helloworld-service
  healthCheck: helloworld-grpc-health-check
  loadBalancingScheme: EXTERNAL_MANAGED
  protocol: GRPC
  timeoutSec: 30

---
# 6. Health Check for the gRPC service
# This is a gRPC health check that targets the gRPC service on its
# containerPort (50051).
apiVersion: networking.gke.io/v1beta1
kind: HealthCheck
metadata:
  name: helloworld-grpc-health-check
spec:
  checkIntervalSec: 5
  timeoutSec: 5
  healthyThreshold: 2
  unhealthyThreshold: 10
  grpcHealthCheck:
    port: 50051
