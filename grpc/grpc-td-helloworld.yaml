# This Kubernetes manifest combines the Deployment, Service, BackendConfig,
# and Ingress resources into a single file for easy deployment.

---
# 1. Deployment: Defines the gRPC application.
# It uses a sample gRPC image and exposes containerPort 50051.
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: app1
  name: app1
spec:
  selector:
    matchLabels:
      run: app1
  replicas: 2
  template:
    metadata:
      labels:
        run: app1
    spec:
      containers:
      - image: grpc/java-example-hostname:1.50.2
        name: app1
        ports:
        - protocol: TCP
          containerPort: 50051
---
# 2. Service: Exposes the gRPC pods to the cluster.
# The `app_protocol` annotation is critical for GKE to recognize this as a gRPC service.
apiVersion: v1
kind: Service
metadata:
  name: helloworld
  annotations:
    # This annotation links the service to the BackendConfig for health check configuration.
    cloud.google.com/backend-config: '{"ports": {"8080":"grpc-backend-config"}}'
    # Specify HTTP2 as the application protocol for gRPC.
    cloud.google.com/app-protocols: '{"helloworld":"HTTP2"}'
spec:
  ports:
  - port: 8080
    name: helloworld
    protocol: TCP
    targetPort: 50051
  selector:
    run: app1
  type: NodePort
---
# 3. BackendConfig: Custom Resource for GKE Load Balancer Health Check.
# This resource configures the load balancer's health check to use the gRPC protocol,
# which is required for it to properly route traffic.
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: grpc-backend-config
spec:
  healthCheck:
    checkIntervalSec: 5
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 10
    type: GRPC
    port: 50051
---
# 4. Ingress: Provisions the external Application Load Balancer.
# It uses the `gce` ingress class and routes traffic to the 'helloworld' service.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: helloworld-ingress
  annotations:
    # Use the GCE ingress controller to provision a load balancer.
    kubernetes.io/ingress.class: "gce"
    # Optional: Reserve a static IP address for the load balancer.
    # kubernetes.io/ingress.global-static-ip-name: "your-static-ip-name"
spec:
  rules:
  - host: helloworld.gcpcloudtest.net
    http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: helloworld
            port:
              name: helloworld
