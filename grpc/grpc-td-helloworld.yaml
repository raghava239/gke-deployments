# This is the final, corrected manifest, ensuring all resources
# are properly configured to work with a GKE Application Load Balancer.

---
# 1. Deployment: Defines the gRPC application.
# The container must expose two ports for gRPC and HTTP health checks.
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: app1
  name: app1
spec:
  selector:
    matchLabels:
      run: app1
  replicas: 2
  template:
    metadata:
      labels:
        run: app1
    spec:
      containers:
      - image: grpc/java-example-hostname:1.50.2
        name: app1
        ports:
        # Port for the gRPC service (e.g., traffic on port 50051)
        - protocol: TCP
          containerPort: 50051
        # Additional port for the HTTP health check endpoint (e.g., health check on port 8080)
        # Your application must serve a simple HTTP response on this port.
        - protocol: TCP
          containerPort: 8080
---
# 2. Service: Exposes the gRPC pods with two ports.
# It links the primary service port to the BackendConfig and defines
# the application protocol for gRPC traffic.
apiVersion: v1
kind: Service
metadata:
  name: helloworld
  annotations:
    # This annotation links the primary service port to the BackendConfig.
    cloud.google.com/backend-config: '{"ports": {"8080":"grpc-backend-config"}}'
    # Specify HTTP2 as the application protocol for gRPC traffic.
    cloud.google.com/app-protocols: '{"helloworld-grpc":"HTTP2"}'
spec:
  ports:
  - port: 8080
    name: helloworld-grpc
    protocol: TCP
    targetPort: 50051
  - port: 8081
    name: helloworld-healthcheck
    protocol: TCP
    targetPort: 8080
  selector:
    run: app1
  type: NodePort
---
# 3. BackendConfig: Custom Resource for GKE Load Balancer Health Check.
# THIS IS THE CRITICAL PART. The health check is now of type HTTP,
# which is supported by the external Application Load Balancer.
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: grpc-backend-config
spec:
  healthCheck:
    checkIntervalSec: 5
    timeoutSec: 5
    healthyThreshold: 2
    unhealthyThreshold: 10
    type: HTTP
    port: 8081
    requestPath: /
---
# 4. Ingress: Provisions the external Application Load Balancer.
# This version uses the modern `ingressClassName` field and a "catch-all" rule
# that will route traffic directly from the load balancer's IP.
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: helloworld-ingress
spec:
  ingressClassName: gce
  rules:
  - http:
      paths:
      - path: /*
        pathType: ImplementationSpecific
        backend:
          service:
            name: helloworld
            port:
              name: helloworld-grpc
